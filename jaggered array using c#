using System;

namespace JaggedArrayExample
{
    class Program
    {
        static void Main(string[] args)
        {
            // Declare variable to store the number of rows
            int row;
            Console.WriteLine("Enter the number of rows:");
            row = int.Parse(Console.ReadLine()); // Read the number of rows from the user

            // Dynamic allocation of jagged array 'arr'
            int[][] arr = new int[row][];

            // Prompt the user to enter the number of columns for each row
            Console.WriteLine("Enter the number of columns for each row:");
            for (int i = 0; i < row; i++)
            {
                int col = int.Parse(Console.ReadLine()); // Read the number of columns for the current row
                arr[i] = new int[col]; // Allocate memory for the columns of the current row
            }

            // Prompt the user to enter the elements of the jagged array
            Console.WriteLine("Enter the elements:");

            // Take input for the elements of the jagged array
            for (int i = 0; i < row; i++)
            {
                for (int j = 0; j < arr[i].Length; j++)
                {
                    arr[i][j] = int.Parse(Console.ReadLine()); // Read each element
                }
            }

            // Print the jagged array
            Console.WriteLine("The jagged array is:");
            for (int i = 0; i < row; i++)
            {
                for (int j = 0; j < arr[i].Length; j++)
                {
                    Console.Write(arr[i][j] + " "); // Print each element
                }
                Console.WriteLine(); // Move to the next line after each row
            }

            // Memory management in C# is handled by the garbage collector, so no need to explicitly deallocate memory
        }
    }
}
